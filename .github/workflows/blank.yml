name: CI Compilar kernel

on:
  workflow_dispatch:
    inputs:
      RUN_OS_VERSON:
        required: true
        description: "Variant OS:"
        type: choice
        default: ubuntu-latest
        options:
          - ubuntu-latest
          - ubuntu-22.04
          - ubuntu-20.04
      Vkernel:
        required: true
        description: "kernel base version:"
        type: choice
        default: v6.x
        options:
          - v1.x
          - v2.x
          - v3.x
          - v4.x
          - v5.x
          - v6.x
      VersionKernel:
        required: true 
        description: "Choice a version of kernel: "
        type: choice
        default: "linux-6.15"
        options:
          - 'linux-6.15'
          - 'linux-6.14.8'
          - 'linux-6.12.30'
          - 'linux-6.6.92'
          - 'linux-6.1.140'
          - 'linux-5.15.184'
          - 'linux-5.10.237'
          - 'linux-5.4.293'
      job:
        description: 'Variant api:'
        required: true
        type: choice
        default: 'build'
        options:
          - build
          - build_Deb_Package
          - build_Rpm_Package
jobs:
  build:
    runs-on: ${{ github.event.inputs.RUN_OS_VERSON }}
    steps:
      #- uses: actions/checkout@v4
        #with:
          # If you don't need a sparse checkout, remove these lines for simplicity.
          # sparse-checkout: |
          #   README.md
          # sparse-checkout-cone-mode: false   
      
      - name: Deletar actions antigas com falhas (Opcional - Requer GITHUB_TOKEN permissions)
        run: |
          # This step requires appropriate permissions for GITHUB_TOKEN
          # and might be better handled by GitHub's retention policies or manually.
          # It also requires 'jq' to be installed.
          # For a standard CI, this is often unnecessary.
          sudo apt-get update && sudo apt-get install -y jq
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs?status=failure" \
          | jq -r '.workflow_runs[] | .id' \
          | xargs -I {} curl -X DELETE \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/actions/runs/{}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Instalar dependências
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm git ccache wget xz-utils
          # Removed 'linux-headers-$(uname -r)' as you're compiling a new kernel, not using existing headers.
          # Added 'wget' and 'xz-utils' for downloading and decompressing the kernel source.
        
      - name: Baixar e descompactar o kernel
        id: download_kernel
        run: |
          # Using a specific kernel version for stability and reproducibility.
          # Always verify the latest stable kernel version if you intend to update.
          KERNEL_VERSION="${{ github.event.inputs.VersionKernel }}" # Example: Use a stable long-term support (LTS) version
          KERNEL_TAR="${KERNEL_VERSION}.tar.xz"
          KERNEL_DIR="${KERNEL_VERSION}"
          KERNEL_SOURCE_URL="https://cdn.kernel.org/pub/linux/kernel/${{ github.event.inputs.Vkernel }}/${KERNEL_TAR}"
          
          wget $KERNEL_SOURCE_URL
          tar -xf ${KERNEL_TAR}
          
          echo "kernel_dir=${KERNEL_DIR}" >> $GITHUB_OUTPUT

      - name: Mudar para o diretório do Kernel
        run: |
          cd ${{ steps.download_kernel.outputs.kernel_dir }}
          # This step is mainly for clarity, ensuring you're in the right directory.

      - name: Compilar Kernel
        run: |
          cd ${{ steps.download_kernel.outputs.kernel_dir }}
          make defconfig # Use 'defconfig' for a sensible default configuration
          make help
          make -j$(nproc)
          #make bindeb-pkg -j$(nproc)
          #tree
          # bzImage modules # Compile bzImage and modules

      - name: Upload de artefatos
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.VersionKernel }}-kernel-artifacts
          path: |
            ${{ steps.download_kernel.outputs.kernel_dir }}/arch/x86/boot/bzImage
            ${{ steps.download_kernel.outputs.kernel_dir }}/System.map
            ${{ steps.download_kernel.outputs.kernel_dir }}/.config
            # You might also want to upload modules, but they are typically in a .deb or .rpm package.
            # For a basic kernel image, bzImage is the primary output.
  # Job for building Debian packages
  build_Deb_Package:
    needs: build # This job depends on the 'build' job completing successfully
    runs-on: ${{ github.event.inputs.RUN_OS_VERSON }}
    if: github.event.inputs.job == 'build_Deb_Package'
    steps:
      - uses: actions/checkout@v4

      - name: Baixar artefatos do kernel compilado
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.event.inputs.VersionKernel }}-kernel-artifacts
          path: ./${{ github.event.inputs.VersionKernel }} # Download to the kernel source directory

      - name: Instalar dependências para Debian packaging
        run: |
          sudo apt-get update
          # kernel-package provides 'make-kpkg' for easier Debian package creation.
          # fakeroot allows creating packages without root privileges.
          sudo apt-get install -y build-essential libncurses-dev gawk flex bison openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf llvm git ccache wget xz-utils fakeroot libdpkg-perl

      - name: Preparar e construir pacotes .deb
        run: |
          # The artifact was downloaded to ${{ github.event.inputs.VersionKernel }}
          cd ${{ github.event.inputs.VersionKernel }}
          
          # make-kpkg is the traditional way to build Debian kernel packages.
          # --initrd: Include initrd in the image package
          # --append-to-version: Append a custom string to the kernel version. Highly recommended!
          # --stem: Base name for the kernel image.
          # kernel_image: Build the kernel image package.
          # kernel_headers: Build the kernel headers package.
          # (Optional) modules_image: If you compile modules separately and want to package them.
          
          # Ensure .config is present, it should be from the downloaded artifact.
          # You might need to move .config to the root of the kernel source if it's nested.
          # Example assumes .config is directly in the downloaded directory.
          
          #fakeroot make-kpkg --initrd \
          #           --append-to-version=-github-actions-${{ github.run_number }} \
          #           kernel_image kernel_headers
          make bindeb-pkg -j$(nproc) 
          # List the created .deb packages
          ls -lh ../*.deb

      - name: Upload de pacotes .deb
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.inputs.VersionKernel }}-deb-packages
          path: |
            *.deb # Upload all .deb files from the parent directory
            # If the .deb files are created in a specific subdirectory, adjust the path.
